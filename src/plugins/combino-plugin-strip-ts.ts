import path from "path";
import chalk from "chalk";
import { Plugin, PluginOptions, FileHook } from "./types.js";

/**
 * Combino Strip TS Plugin
 * Provides TypeScript stripping functionality and file commenting
 */
class CombinoStripTSPlugin {
	private initialized = false;
	public stripTSFromString: any = null;

	async initialize(): Promise<void> {
		if (this.initialized) return;
		try {
			// Dynamically import strip-ts
			const stripTS = await import("strip-ts");
			this.stripTSFromString = stripTS.stripTSFromString;
			this.initialized = true;
		} catch (error) {
			console.warn(
				"Combino Strip TS plugin requires the 'strip-ts' package to be installed for TypeScript stripping functionality. Please run: npm install strip-ts",
			);
		}
	}

	async render(content: string, data: Record<string, any>): Promise<string> {
		// This plugin doesn't do template rendering, only transform hooks
		return content;
	}

	hasTemplateSyntax(content: string): boolean {
		// This plugin doesn't detect template syntax - it should process all files
		return false;
	}
}

/**
 * Combino Strip TS Plugin Factory Function
 * Creates a plugin that provides TypeScript stripping and file commenting functionality
 */
export function stripTS(options: PluginOptions = {}): Plugin {
	const transform: FileHook = async (context) => {
		const { targetPath, content, data } = context;

		// Skip stripping for TypeScript declaration files
		if (targetPath.endsWith(".d.ts")) {
			return {
				content,
				targetPath,
			};
		}

		// Add a comment to all JavaScript files
		if (targetPath.endsWith(".js")) {
			return {
				content: `// Generated by Combino\n${content}`,
				targetPath: context.targetPath,
			};
		}

		// If TypeScript is disabled, strip TypeScript annotations from relevant files
		if (!data.typescript) {
			const ext = path.extname(targetPath).toLowerCase();

			// Check if this is a TypeScript file that should be converted
			if (
				ext === ".ts" ||
				ext === ".tsx" ||
				ext === ".vue" ||
				ext === ".svelte"
			) {
				try {
					// Initialize the plugin to get strip-ts functionality
					const plugin = new CombinoStripTSPlugin();
					await plugin.initialize();

					if (!plugin.stripTSFromString) {
						console.log(
							chalk.yellow(
								`     ‚ö†Ô∏è  strip-ts not available, skipping TypeScript stripping for ${path.basename(targetPath)}`,
							),
						);
						return {
							content: content,
							targetPath: context.targetPath,
						};
					}

					// Map file extension to file type for strip-ts
					let fileType;
					if (ext === ".ts") fileType = "ts";
					else if (ext === ".tsx") fileType = "tsx";
					else if (ext === ".vue") fileType = "vue";
					else if (ext === ".svelte") fileType = "svelte";

					// Process content directly with strip-ts
					const processedContent = await plugin.stripTSFromString(
						content,
						fileType,
					);

					if (processedContent && processedContent !== content) {
						// Update the target path to use .js extension for .ts files
						let newTargetPath = context.targetPath;
						if (ext === ".ts") {
							newTargetPath = targetPath.replace(".ts", ".js");
						} else if (ext === ".tsx") {
							newTargetPath = targetPath.replace(".tsx", ".jsx");
						}

						console.log(
							chalk.gray(
								`     üîÑ Stripped TypeScript from ${path.basename(targetPath)}`,
							),
						);

						return {
							content: processedContent,
							targetPath: newTargetPath,
						};
					}
				} catch (error) {
					const errorMessage =
						error instanceof Error ? error.message : String(error);
					console.log(
						chalk.yellow(
							`     ‚ö†Ô∏è  Failed to strip TypeScript from ${path.basename(targetPath)}: ${errorMessage}`,
						),
					);
					return {
						content: content,
						targetPath: context.targetPath,
					};
				}
			}
		}

		return {
			content: content,
			targetPath: context.targetPath,
		};
	};

	return {
		options: {
			priority: 0,
			patterns: ["*"], // Process all files
			...options,
		},
		transform,
	};
}

// Default export for convenience
export default stripTS;

// Export combinoCore for backward compatibility with tests
export const combinoCore = stripTS;
