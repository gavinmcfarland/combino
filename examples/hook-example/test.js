import { Combino } from '../../dist/index.js';
import path from 'path';
import { fileURLToPath } from 'url';

const __dirname = path.dirname(fileURLToPath(import.meta.url));

async function testHook() {
    console.log('Testing Combino with file processing hook...\n');

    const combino = new Combino();

    // Define a hook that adds a comment to all JavaScript files
    const addCommentHook = (context) => {
        const { sourcePath, targetPath, content, data } = context;

        // Only modify JavaScript files (not JSON files)
        if ((targetPath.endsWith('.js') || targetPath.endsWith('.ts')) && !targetPath.endsWith('.json')) {
            const comment = `// Generated by Combino on ${new Date().toISOString()}\n// Source: ${path.basename(sourcePath)}\n\n`;
            return comment + content;
        }

        return content;
    };

    // Define a hook that transforms JSON files
    const transformJsonHook = async (context) => {
        const { targetPath, content, data } = context;

        // Only modify JSON files
        if (targetPath.endsWith('.json')) {
            try {
                const json = JSON.parse(content);
                // Add metadata to JSON files
                json._metadata = {
                    generatedAt: new Date().toISOString(),
                    framework: data.framework,
                    language: data.language,
                    generatedBy: 'Combino'
                };
                return JSON.stringify(json, null, 2);
            } catch (error) {
                console.warn(`Failed to parse JSON in ${targetPath}:`, error.message);
                return content;
            }
        }

        return content;
    };

    // Combine multiple hooks
    const combinedHook = async (context) => {
        let result = context.content;

        // Apply first hook
        result = await Promise.resolve(addCommentHook({ ...context, content: result }));

        // Apply second hook
        result = await Promise.resolve(transformJsonHook({ ...context, content: result }));

        return result;
    };

    try {
        await combino.combine({
            outputDir: './output-hook',
            include: ['./templates/ejs-example'],
            data: {
                name: 'Hook Test Project',
                description: 'Testing file processing hooks',
                features: ['Hook Feature 1', 'Hook Feature 2'],
                framework: 'React',
                language: 'TypeScript',
                version: '1.0.0'
            },
            onFileProcessed: combinedHook
        });
        console.log('✅ Hook test completed successfully');
        console.log('Check the output-hook directory to see the modified files');
    } catch (error) {
        console.error('❌ Hook test failed:', error.message);
    }
}

testHook().catch(console.error);
